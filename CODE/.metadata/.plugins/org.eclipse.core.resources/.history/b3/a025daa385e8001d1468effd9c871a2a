
public class Miller_Rabin_primality_test_int {

//	<<32-bit modular exponentiation function>>=
		private static int modular_exponent_32(int base, int power, int modulus) {
		    long result = 1;
		    for (int i = 31; i >= 0; i--) {
		        result = (result*result) % modulus;
		        if ((power & (1 << i)) != 0) {
		            result = (result*base) % modulus;
		        }
		    }
		    return (int)result; // Will not truncate since modulus is an int
		}
	
//		<<32-bit Miller-Rabin pass>>=
			private static boolean miller_rabin_pass_32(int a, int n) {
//			    32-bit compute s and d
//				<<32-bit compute s and d>>=
					int d = n - 1;
					int s = Integer.numberOfTrailingZeros(d);
					d >>= s;
			    int a_to_power = modular_exponent_32(a, d, n);
			    if (a_to_power == 1) return true;
			    for (int i = 0; i < s-1; i++) {
			        if (a_to_power == n-1) return true;
			        a_to_power = modular_exponent_32(a_to_power, 2, n);
			    }
			    if (a_to_power == n-1) return true;
			    return false;
			}
			
//			<<32-bit Miller-Rabin>>=
				public static boolean miller_rabin_32(int n) {
				    if (n <= 1) return false;
				    else if (n == 2) return true;
				    else if (miller_rabin_pass_32( 2, n) &&
				        (n <= 7  || miller_rabin_pass_32( 7, n)) &&
				        (n <= 61 || miller_rabin_pass_32(61, n)))
				        return true;
				    else
				        return false;
				}
				
			    public static void main(String[] args) {
			        int n = Integer.parseInt(args[0]);
			        System.out.println(miller_rabin_32(n) ? "PRIME" : "COMPOSITE");
			    }
				
}
